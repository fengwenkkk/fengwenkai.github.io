#include "g_include.h"
#include "msg.h"
#include "ats.h"
#include "ATSThread.h"

bool    g_bATSUseNetOrder = false;
UINT16  g_usATSTCPPort = ATS_SERVER_PORT;
UINT16  g_usATSLineID = 14;

IntSet      g_sClientSocket;

extern UINT32 dtp_get_fd_num(FDSET* fds);
extern SOCKET dtp_get_socket_by_fds(FDSET *fds, UINT32 ulIndex);

extern void GetATSInfo(VECTOR<ATS_INFO_T> &vInfo);

UINT16 ATSHtons(UINT16 usValue)
{
    if (g_bATSUseNetOrder)
    {
        return htons(usValue);
    }
    else
    {
        UINT8   aucValue[2];

        aucValue[0] = (UINT8)usValue;
        aucValue[1] = usValue>>8;

        return GET_SHORT(aucValue); // windows字节序
    }
}

UINT32 ATSHtonl(UINT32 ulValue)
{
    if (g_bATSUseNetOrder)
    {
        return htonl(ulValue);
    }
    else
    {
        UINT8   aucValue[4];

        aucValue[0] = (UINT8)ulValue;
        aucValue[1] = (UINT8)(ulValue>>8);
        aucValue[2] = (UINT8)(ulValue>>16);
        aucValue[3] = (UINT8)(ulValue>>24);

        return GET_INT(aucValue); // windows字节序
    }
}

//---------------------------------------------------------------------------
void ATSInfoToNet(ATS_INFO_T *pstATSInfo)
{
 //   pstATSInfo->ucDirection = ConvertTrainDirection(pstATSInfo->ucDirection);

    ATSHtons(pstATSInfo->usRtuID);
    ATSHtons(pstATSInfo->usStationID);
    ATSHtons(pstATSInfo->usUpsideStationID);
    ATSHtons(pstATSInfo->usDownsideStationID);
    ATSHtons(pstATSInfo->usLogicSectionID);
    ATSHtons(pstATSInfo->usPhysicSectionID);
    ATSHtons(pstATSInfo->usDriverNumber);
    ATSHtonl(pstATSInfo->iOtpTime);
    ATSHtons(pstATSInfo->stArriveTime.usYear);
    ATSHtons(pstATSInfo->stDepartTime.usYear);
}

static SOCKET CreateSocket()
{
    SOCKET              stSocket = INVALID_SOCKET;
    SOCKADDR_IN         stLocalAddr = {0};
    UINT32              ulFlag = 1;

    gos_init_socket();

    stLocalAddr.sin_family = PF_INET;
    stLocalAddr.sin_port   = HTONS(g_usATSTCPPort);
    memset(&stLocalAddr.sin_addr.s_addr, 0, 4);

    stSocket = socket (PF_INET, SOCK_STREAM, IPPROTO_TCP);
    if (stSocket == INVALID_SOCKET)
    {
       // Log(DTP_LOG_ERR, "server_create_socket: create socket failed: %s", gos_get_socket_err());
        return INVALID_SOCKET;
    }

    if (setsockopt(stSocket, SOL_SOCKET, SO_REUSEADDR, (CHAR*)&ulFlag, sizeof(ulFlag)) == SOCKET_ERROR)
    {
       // Log(DTP_LOG_ERR, "server_create_socket: setsockopt failed, %s", gos_get_socket_err());
        CLOSE_SOCKET (stSocket);

        return INVALID_SOCKET;
    }

    if (bind (stSocket, (SOCKADDR *) &stLocalAddr, sizeof (SOCKADDR)) == SOCKET_ERROR)
    {
        //Log(DTP_LOG_ERR, "server_create_socket: bind socket failed, %s", gos_get_socket_err());
        CLOSE_SOCKET (stSocket);

        return INVALID_SOCKET;
    }

    // mpk
    if (listen (stSocket, 16) == SOCKET_ERROR)
    {
    //    Log(DTP_LOG_ERR, "server_create_socket: listen socket failed, %s", gos_get_socket_err());
        CLOSE_SOCKET (stSocket);

        return INVALID_SOCKET;
    }

    return stSocket;
}

INT32 ATSThread::RecvMsg(SOCKET stSocket)
{
    INT32       iRecvSize;
    UINT32      ulByteToRecved = 0;

    /* 看看有多少字节可读 */
    if (ioctlsocket(stSocket, FIONREAD, (unsigned long*)&ulByteToRecved) == SOCKET_ERROR)
    {
        return -1;
    }

    /* 如果没有字节可读, 则对端已经关闭连接, 返回错误 */
    if (ulByteToRecved == 0)
    {
        return 0;
    }

    /* 处理上次RecvMsg的剩余数据 */
    iRecvSize = recv(stSocket, (CHAR*)m_aucRecvBuf, sizeof(m_aucRecvBuf), 0);
  /*    if (iRecvSize != sizeof(GET_ATS_INFO_REQ_T))
    {
        return -1;
    } */

    return iRecvSize;
}

INT32 ATSThread::ListenMsg(UINT32 ulTimeout)
{
    FDSET       fds;
    FDSET       fdsAll;
    TIMEVAL     stTimeout = {0};
    SOCKET      stClientSocket = INVALID_SOCKET;
    SOCKADDR    stAddr;
    INT32       iAddrLen = sizeof(SOCKADDR);
    INT32       iRet;
    INT32       iRecvLen;
    INT32       iErrCode = 0;
    UINT32      ulFdCount;
    UINT32      ulTotalFdCount;
    UINT32      i;
    INT32       iNoDelay = 1;
    BOOL        bNeedClose;
    SOCKET      stSocket = m_stSocket;

    FD_ZERO(&fdsAll);
    FD_SET(stSocket, &fdsAll);

again:
    fds = fdsAll;

    stTimeout.tv_sec = ulTimeout;
    iRet = select(FD_SETSIZE, &fds, NULL, NULL, &stTimeout);
    if (iRet == 0)
    {
        VECTOR<SOCKET>  vSocket;

        for (UINT32 i=0; i<g_sClientSocket.Size(); i++)
        {
            SOCKET  stSock = g_sClientSocket.Get(i);

            if (!SendATSInfo(stSock))
            {
                vSocket.push_back(stSock);
            }
        }

        for (UINT32 i=0; i<vSocket.size(); i++)
        {
            SOCKET  stSock = vSocket[i];

            g_sClientSocket.Del(stSock);
            FD_CLR(stSock, &fdsAll);
            CLOSE_SOCKET(stSock);
        }

        goto again;
    }

    if (iRet < 0)
    {
        if (errno == EINTR)
        {
            goto again;
        }
    }

    if (FD_ISSET(stSocket, &fds))
    {
       // FD_CLR(stSocket, &fds);
accept_again:
        stClientSocket = accept (stSocket, &stAddr, (socklen_t*)&iAddrLen);
        if (stClientSocket == SOCKET_ERROR)
        {
            if (/*errno == ECONNABORTED || */ errno == EINTR)
            {
                goto accept_again;
            }

            goto again;
            //return -1;
        }

        /* 设置NoDelay方式 */
        setsockopt(stClientSocket, IPPROTO_TCP, TCP_NODELAY, (CHAR*)&iNoDelay, sizeof(iNoDelay));

        FD_SET(stClientSocket, &fdsAll);

        g_sClientSocket.Add(stClientSocket);
        goto again;
    }

    /* 处理 tcp 端口上的消息 */
    ulFdCount = 0;
    ulTotalFdCount = dtp_get_fd_num(&fds);
    for (i = 0; i < FD_SETSIZE; i++)
    {
        bNeedClose = FALSE;

        if (ulFdCount >= ulTotalFdCount)
        {
            break;
        }

        stClientSocket = dtp_get_socket_by_fds(&fds, i);
        if (stClientSocket == INVALID_SOCKET)
        {
            continue;
        }

        if (stClientSocket == stSocket)
        {
            continue;
        }

        ulFdCount++;

        if (!FD_ISSET(stClientSocket, &fds))
        {
            continue;
        }

        /* 有消息到, 进行处理 */
        iErrCode = 0;
        iRecvLen = RecvMsg(stClientSocket);
        if (iRecvLen <= 0)
        {
            FD_CLR(stClientSocket, &fdsAll);
            CLOSE_SOCKET(stClientSocket);
        }
        else
        {
            HandleRecvMsg(stClientSocket);
            SendATSInfo(stClientSocket);
        }
    }

    goto again;
}

BOOL SendATSFrame(SOCKET stClientSocket, ATS_FRAME_HDR_T *pstATSHdr, UINT8 ucTotalFrame, UINT8 ucFrameIndex)
{
    UINT32      ulMsgLen = sizeof(ATS_FRAME_HDR_T) + pstATSHdr->usDataLen + sizeof(UINT16);
    UINT16      *pusTail = (UINT16*)(((UINT8*)(pstATSHdr+1)) + pstATSHdr->usDataLen );

    if (pstATSHdr->usDataLen == 0)
    {
        return FALSE;
    }

    pstATSHdr->usDataLen = ATSHtons(pstATSHdr->usDataLen);

    pstATSHdr->usFrameHead = ATSHtons(ATS_FRAME_HEAD);
    pstATSHdr->ucFrameCount = ucTotalFrame;
    pstATSHdr->ucFrameIndex = ucFrameIndex+1;   // 当前帧序号，从1开始
    *pusTail = ATSHtons(ATS_FRAME_TAIL);

    return gos_tcp_send(stClientSocket, pstATSHdr, ulMsgLen);
}

char        *g_aszATSData[] = {
#if 0
    "efef070100041806e5070c08092818830000000000000000000000000000000000000003010a0b0100000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000000430303030033030300230300000b2070101000000b20701010000000000000000000000000000000000000000000000000c0200000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000000430303030033030300230300000b2070101000000b20701010000000000000000000000000000000000000000000000000b0300000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000000430303030033030300230300000b2070101000000b20701010000000000000000000000000000000000000000000000000c0400000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000000430303030033030300230300000b2070101000000b20701010000000000000000000000000000000000000000000000000d0500000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000000430303030033030300230300000b2070101000000b20701010000000000000000000000000000000000000000000000000e0600000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000000430303030033030300230300000b2070101000000b20701010000000000000000000000000000000000000000000000000d0700000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000000430303030033030300230300000b20701010000fdfdefef0702000400b2070101000000000000000000000000000000000000000000000000000430303030033030300230300000b2070101000000b20701010000000000000000000000000000000000000000000000000e0800000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000000430303030033030300230300000b2070101000000b20701010000000000000000000000000000000000000000000000000f0900000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000000430303030033030300230300000b2070101000000b20701010000000000000000000000000000000000000000000000000f0a00000430303030033030300230300000b2070101000000b20701010000000000000000",
    "00000000000000000000000000000000000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000000430303030033030300230300000b2070101000000b20701010000000000000000000000000000000000000000000000001806e5070c08092818830000000000000000000000000000000000000003010a100b00000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000110c00000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000100d00000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000000430303030033030300230300000b2070101000000b207010100000000000000000000000000000000000000fdfd",
    "efef070300040000000000110e00000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000120f00000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000131000000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000121100000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000131200000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000141300000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000151400000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000000430303030033030300230300000b2070101000000b207010100000000000000000000000000000000000000000000fdfdefef070400040000000430303030033030300230300000b2070101000000b20701010000000000000000000000000000000000000000000000001806e5070c08092818830000000000000000000000000000000000000003010a161500000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000141600000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000151700000430303030033030300230300000b2070101000000b2070101000000",
    "000000000000000000000000000000000000000000000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000161800000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000171900000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000181a00000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000171b00000430303030033030300230300000b2070101fdfd",
    "efef07050004000000b2070101000000000000000000000000000000000000000000000000000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000181c00000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000191d00000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000000430303030033030300230300000b2070101000000b20701010000000000000000000000000000000000000000000000001a1e00000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000000430303030033030300230300000b2070101000000b20701010000000000000000000000000000000000000000000000001806e5070c08092818830000000000000000000000000000000000000003010a191f00000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000000430303030033030300230300000b2070101000000b20701010000000000000000000000000000000000000000000000001a2000000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000000430303030033030300230300000b2070101000000b20701010000000000000000000000000000000000000000000000001b2100000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000000430303030033030300230300000b2070101000000b20701010000000000000000000000000000000000fdfdefef0706000400000000000000000430303030033030300230300000b2070101000000b20701010000000000000000000000000000000000000000000000001c2200000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000000430303030033030300230300000b2070101000000b20701010000000000000000000000000000000000000000000000001b2300000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000000430303030033030300230300000b2070101000000b20701010000000000000000000000000000000000000000000000001c2400000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000000430303030",
    "033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000000430303030033030300230300000b2070101000000b20701010000000000000000000000000000000000000000000000000b2500000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000000430303030033030300230300000b2070101000000b20701010000000000000000000000000000000000000000000000000b2600000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000000430303030033030300230300000b2070101000000b20701010000000000000000000000000000000000000000000000001c2700000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000000430303030033030300230300000b2070101000000b20701010000000000000000000000000000000000000000000000001c2800000430303030033030300230300000b2070101000000b20701010000000000000000000000000000000000000000fdfd",
 //   "efef0707680000000000000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000000430303030033030300230300000b2070101000000b2070101000000000000000000000000000000000000000000000000fdfd"
    "efef07076a006800e5070c0909261783000000000000000000000000000000000000000501010430303032033030360232320332383908001a001a001a00ff0000000101000402af000108020000fdaeffffe5070c0911292fe5070c09112a1101aa5501aaaa00000000000000000000fdfdefef01016a006800e5070c0909261783000000000000000000000000000000000000000501010430303032033030360232320332383908001a001a001a00ff0000000101000402af000108020000fdaeffffe5070c0911292fe5070c09112a1101aa5501aaaa00000000000000000000fdfd"
#endif
    "efef010127002500e5070c09092617830000000000000000000000000000000000000001010000000000000000fdfd", // 心跳
//    "efef01016a006800e5070c0909261783000000000000000000000000000000000000000501010430303032033030360232320332383908001a001a001a00ff0000000101000402af000108020000fdaeffffe5070c0911292fe5070c09112a1101aa5501aaaa00000000000000000000fdfdefef01016a006800e5070c0909261783000000000000000000000000000000000000000501010430303032033030360232320332383908001a001a001a00ff0000000101000402af000108020000fdaeffffe5070c0911292fe5070c09112a1101aa5501aaaa00000000000000000000fdfd", // ATS数据

};

UINT32      g_ulATSDataLen[7];
UINT8       *g_apucATSData[7];

void InitATSMsg()
{
    static bool bInit = false;

    if (bInit)
    {
        return;
    }

    for (UINT32 i=0; i<ARRAY_SIZE(g_aszATSData); i++)
    {
        g_ulATSDataLen[i] = strlen(g_aszATSData[i])/2;
        g_apucATSData[i] = (UINT8*)calloc(1, g_ulATSDataLen[i]);
        gos_hexstr_to_byte((CHAR*)g_aszATSData[i], g_apucATSData[i]);
    }

    bInit = true;
}

UINT32 ForamtATSData(ATS_INFO_T &stInfo, UINT8 *pucMsg)
{
    UINT32  ulLen = 0;

    pucMsg[ulLen++] = stInfo.ucTrainUnitIDLen;
    memcpy(pucMsg+ulLen, stInfo.acTrainUnitID, stInfo.ucTrainUnitIDLen);
    ulLen += stInfo.ucTrainUnitIDLen;

    pucMsg[ulLen++] = stInfo.ucServiceNumberLen;
    memcpy(pucMsg+ulLen, stInfo.acServiceNumber, stInfo.ucServiceNumberLen);
    ulLen += stInfo.ucServiceNumberLen;

    pucMsg[ulLen++] = stInfo.ucOrderNumberLen;
    memcpy(pucMsg+ulLen, stInfo.acOrderNumber, stInfo.ucOrderNumberLen);
    ulLen += stInfo.ucOrderNumberLen;

    pucMsg[ulLen++] = stInfo.ucDestIDLen;
    memcpy(pucMsg+ulLen, stInfo.acDestID, stInfo.ucDestIDLen);
    ulLen += stInfo.ucDestIDLen;

    memcpy(pucMsg+ulLen, &stInfo.usRtuID, sizeof(stInfo)-STRUCT_OFFSET(ATS_INFO_T, usRtuID));
    ulLen += sizeof(stInfo)-STRUCT_OFFSET(ATS_INFO_T, usRtuID);

    return ulLen;
}

VOID FormatATSData(VECTOR<ATS_INFO_T> &vInfo, ATS_MSG_ATSINFO_T *pstMsg, UINT32 &ulMsgLen)
{
    ulMsgLen = STRUCT_OFFSET(ATS_MSG_ATSINFO_T, astATSInfo);

    UINT32  ulATSMsgLen;
    UINT8   *pucMsg = (UINT8*)pstMsg->astATSInfo;

    for (UINT32 i=0; i<vInfo.size(); i++)
    {
        ATS_INFO_T      &stInfo = vInfo[i];
        UINT32          ulTrainUnitID;
        CHAR            acTrainUnitID[32];

        memset(acTrainUnitID, 0, sizeof(acTrainUnitID));
        memcpy(acTrainUnitID, stInfo.acTrainUnitID, sizeof(stInfo.acTrainUnitID));
        if (!gos_atou(acTrainUnitID, &ulTrainUnitID))
        {
            GosLog(LOG_ERROR, "invalid train %s", acTrainUnitID);
            continue;
        }

        sprintf(acTrainUnitID, "%0*u", sizeof(stInfo.acTrainUnitID), ulTrainUnitID);
        memcpy(stInfo.acTrainUnitID, acTrainUnitID, sizeof(stInfo.acTrainUnitID));

        ulATSMsgLen = ForamtATSData(stInfo, pucMsg);
        pucMsg += ulATSMsgLen;
        ulMsgLen += ulATSMsgLen;
    }
}


BOOL ATSThread::SendATSInfo(SOCKET stClientSocket)
{
/*    static UINT32 ulIndex = 0;
    InitATSMsg();

    for (UINT32 i=0; i<ARRAY_SIZE(g_aszATSData); i++)
    {
        send(stClientSocket, g_apucATSData[i], g_ulATSDataLen[i], 0);
    }

    return TRUE;  */

    VECTOR<ATS_INFO_T>  vInfo;
    static ATS_MSG_ATSINFO_T    *pstATSMsg = NULL;
    static UINT8        aucBuf[sizeof(ATS_FRAME_HDR_T) + ATS_MAX_DATA_LEN + sizeof(UINT16)];
    ATS_FRAME_HDR_T     *pstATSHdr = (ATS_FRAME_HDR_T*)aucBuf;
    UINT32              ulTotalMsgLen;

    GetATSInfo(vInfo);

    if (vInfo.size() == 0)
    {
      //  return TRUE;
    }

    GOS_FREE(pstATSMsg);
    pstATSMsg = (ATS_MSG_ATSINFO_T*)calloc(1, STRUCT_OFFSET(ATS_MSG_ATSINFO_T, astATSInfo)+vInfo.size()*sizeof(ATS_INFO_T));

    pstATSMsg->ucTrainNum = vInfo.size();

    GOS_DATETIME_T      stTime;
    UINT32              ulTime = gos_get_current_time();
    UINT32              ulWaitTime = pstATSMsg->ucTrainNum?800/pstATSMsg->ucTrainNum:10; // 800ms发完数据包

    if (ulWaitTime < 10)
    {
        ulWaitTime = 10;
    }
    else if (ulWaitTime > 50)
    {
        ulWaitTime = 50;
    }

    gos_get_abstime(&ulTime, &stTime);

    pstATSMsg->stMsgHdr.stMsgTime.usYear = ATSHtons(stTime.usYear);
    pstATSMsg->stMsgHdr.stMsgTime.ucMonth = stTime.ucMonth;
    pstATSMsg->stMsgHdr.stMsgTime.ucDay = stTime.ucDay;
    pstATSMsg->stMsgHdr.stMsgTime.ucHour = stTime.ucHour;
    pstATSMsg->stMsgHdr.stMsgTime.ucMin = stTime.ucMinute;
    pstATSMsg->stMsgHdr.stMsgTime.ucSec = stTime.ucSecond;
    pstATSMsg->stMsgHdr.usLineID = ATSHtons(g_usATSLineID);
    pstATSMsg->stMsgHdr.ucMsgID = ATS_MSGID_ATSINFO;
    pstATSMsg->stMsgHdr.ucVer = ATS_VER;

    for (UINT32 i=0; i<pstATSMsg->ucTrainNum; i++)
    {
        ATSInfoToNet(&vInfo[i]);
    }

    // 将ATS数组转换成待发送的ATS数据流
    FormatATSData(vInfo, pstATSMsg, ulTotalMsgLen);

    pstATSMsg->stMsgHdr.usMsgLen = ulTotalMsgLen - sizeof(pstATSMsg->stMsgHdr.usMsgLen);
    pstATSMsg->stMsgHdr.usMsgLen = ATSHtons(pstATSMsg->stMsgHdr.usMsgLen);

    UINT32      ulTotalSendMsgLen = 0;
    INT32       iCurrMsgLen = 0;
    UINT32      ulFrameNum = (ulTotalMsgLen+ATS_MAX_DATA_LEN-1)/ATS_MAX_DATA_LEN;

    for (UINT8 ucFrameIndex=0; ;ucFrameIndex++)
    {
        iCurrMsgLen = ulTotalMsgLen - ulTotalSendMsgLen;
        if (iCurrMsgLen < 0)
        {
            return FALSE;
        }

        if (iCurrMsgLen == 0)
        {
            break;
        }

        if (iCurrMsgLen > ATS_MAX_DATA_LEN)
        {
            iCurrMsgLen = ATS_MAX_DATA_LEN;
        }

        memcpy(aucBuf+sizeof(ATS_FRAME_HDR_T), ((UINT8*)pstATSMsg)+ulTotalSendMsgLen, iCurrMsgLen);
        pstATSHdr->usDataLen = iCurrMsgLen;

        if (!SendATSFrame(stClientSocket, pstATSHdr, ulFrameNum, ucFrameIndex))
        {
            return FALSE;
        }

        /// gos_sleep_1ms(ulWaitTime);

        ulTotalSendMsgLen += iCurrMsgLen;
    }

    return TRUE;
}

VOID ATSThread::HandleRecvMsg(SOCKET stClientSocket)
{
// 发心跳消息
    UINT8               aucMsg[sizeof(ATS_FRAME_HDR_T)+sizeof(ATS_MSG_HEARTBEAT_T)+sizeof(UINT16)];
    ATS_FRAME_HDR_T     *pstFrameHdr = (ATS_FRAME_HDR_T*)aucMsg;
    ATS_MSG_HEARTBEAT_T *pstMsg = (ATS_MSG_HEARTBEAT_T*)(pstFrameHdr+1);
    GOS_DATETIME_T      stTime;
    UINT16              *pusTail = (UINT16*)(pstMsg+1);

    gos_get_localtime(NULL, &stTime);
    memset(aucMsg, 0, sizeof(aucMsg));

    pstFrameHdr->usFrameHead  = ATSHtons(ATS_FRAME_HEAD);
    pstFrameHdr->ucFrameCount = 1;
    pstFrameHdr->ucFrameIndex = 1;
    pstFrameHdr->usDataLen = ATSHtons(sizeof(ATS_MSG_HEARTBEAT_T));

    pstMsg->stMsgHdr.usMsgLen = ATSHtons(sizeof(ATS_MSG_HEARTBEAT_T)-sizeof(UINT16));
    pstMsg->stMsgHdr.stMsgTime.usYear = ATSHtons(stTime.usYear);
    pstMsg->stMsgHdr.stMsgTime.ucMonth = stTime.ucMonth;
    pstMsg->stMsgHdr.stMsgTime.ucDay = stTime.ucDay;
    pstMsg->stMsgHdr.stMsgTime.ucHour = stTime.ucHour;
    pstMsg->stMsgHdr.stMsgTime.ucMin = stTime.ucMinute;
    pstMsg->stMsgHdr.stMsgTime.ucSec = stTime.ucSecond;

    pstMsg->stMsgHdr.usLineID = ATSHtons(g_usATSLineID);
    pstMsg->stMsgHdr.ucMsgID = ATS_MSGID_HEARTBEAT;
    pstMsg->stMsgHdr.ucVer = ATS_VER;

    *pusTail = ATSHtons(ATS_FRAME_TAIL);

    gos_tcp_send(m_stSocket, aucMsg, (sizeof(ATS_FRAME_HDR_T)+sizeof(ATS_MSG_HEARTBEAT_T)+sizeof(UINT16)));
}

ATSThread::ATSThread():GThread(NULL)
{
}

GOS_THREAD_RET ATSThread::ThreadEntry(void* pPara)
{
    UINT32      ulTimeout = 2;

    m_stSocket = CreateSocket();
    if (m_stSocket == INVALID_SOCKET)
    {
        exit(0);
        return 0;
    }

    while(1)
    {
        ListenMsg(ulTimeout);
    }
}
